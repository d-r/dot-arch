#!/usr/bin/env nu

use ~/dot/nu/kit.nu *

#-------------------------------------------------------------------------------
# HIGH-LEVEL

# The knight who says "Ni!"
def main [] {
    help main
}

# Spawn a terminal
def "main toggle-term" [] {
    let $w = (main windows-in-focused-workspace | where app_id == term | first?)
    if ($w | is-empty) {
        kitty --app-id term
    } else if $w.is_focused {
        main focus-previous-window
    } else {
        main focus-window $w.id
    }
}

# Run a CLI app inside of a terminal
def "main spawn-cli-app" [$id: string, ...$cmd] {
    kitty --app-id $id ...$cmd
}

# Pick something from a menu
def "main pick" [] {
    help main pick
}

# Pick a bookmark
def "main pick bookmark" [] {
    modal bm
}

# Pick an application
def "main pick app" [] {
    modal app
}

# Run a command inside of a modal terminal
def --wrapped modal [...$cmd] {
    let $pid = (nim windows | where app_id == modal | get pid.0?)
    if ($pid | is-empty) {
        kitty --config ~/.config/kitty/modal.conf --app-id modal ...$cmd
    } else {
        kill $pid
    }
}

#-------------------------------------------------------------------------------
# ACTIONS

alias perform = niri msg action

# Focus the window that previously had focus
def "main focus-previous-window" [] {
    perform focus-window-previous
}

# Focus a window
def "main focus-window" [$id] {
    perform focus-window --id $id
}

#-------------------------------------------------------------------------------
# QUERIES

# Get the focused workspace
def "main focused-workspace" [] {
    main workspaces | where is_focused == true | first
}

# Get the focused window
def "main focused-window" [] {
    main windows-in-focused-workspace | where is_focused == true | first?
}

# List windows in focused workspace
def "main windows-in-focused-workspace" [] {
    main windows | where workspace_id == (main focused-workspace).id
}

# List workspaces
def "main workspaces" [] {
    msg workspaces
}

# List windows
def "main windows" [] {
    msg windows
}

def --wrapped msg [...$args] {
    niri msg -j ...$args | from json
}
