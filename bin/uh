#!/usr/bin/env nu

use ~/dot/nu/kit.nu *
use ~/dot/nu/niri.nu *

# Uh...
def main [] {
    help main
}

#-------------------------------------------------------------------------------
# HIGH-LEVEL

const $ACCENT_COLOR = "#7fc8ff"
const $ACTIVE_BG_COLOR = "#1a1a1a"
const $THEME = {
    prompt: "#555555",
    cursor: $ACCENT_COLOR,
    matched: $ACCENT_COLOR,
    current: "#dddddd",
    current_bg: $ACTIVE_BG_COLOR,
    current_match: $ACCENT_COLOR,
    current_match_bg: $ACTIVE_BG_COLOR,
}

let $theme = ($THEME | dict-str ":" ",")

let $sk_options = $"--reverse --no-info --color=($theme)"

# Spawn a terminal
def "main toggle-term" [] {
    let $w = (ni windows-in-focused-workspace | where app_id == term | first?)
    if ($w | is-empty) {
        kitty --app-id term
    } else if $w.is_focused {
        ni focus-previous-window
    } else {
        ni focus-window $w.id
    }
}

# Run a CLI app inside of a terminal
def "main spawn-cli-app" [$id: string, ...$cmd] {
    kitty --app-id $id ...$cmd
}

# Pick something from a menu
def "main pick" [] {
    help main pick
}

# Pick a bookmark
def "main pick bookmark" [] {
    modal bm
}

# Pick an application
def "main pick app" [] {
    modal app
}

# Pick a project
def "main pick project" [] {
    modal pro
}

# Run a command inside of a modal terminal
def --wrapped modal [...$cmd] {
    let $pid = (ni windows | where app_id == modal | get pid.0?)
    if ($pid | is-empty) {
        let $cmd = (main nu-command ...$cmd)
        kitty --config ~/.config/kitty/modal.conf --app-id=modal -- ...$cmd
    } else {
        kill $pid
    }
}

# Generate a [nu -c ...] command to be executed in a terminal
def "main nu-command" [...$cmd] {
    let $opt = $'SKIM_DEFAULT_OPTIONS="($sk_options)" '
    let $cmd = $opt ++ ($cmd | str join " ")
    [nu -c $cmd]
}
